
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model persona
 * 
 */
export type persona = $Result.DefaultSelection<Prisma.$personaPayload>
/**
 * Model encuesta
 * 
 */
export type encuesta = $Result.DefaultSelection<Prisma.$encuestaPayload>
/**
 * Model registro
 * 
 */
export type registro = $Result.DefaultSelection<Prisma.$registroPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Personas
 * const personas = await prisma.persona.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Personas
   * const personas = await prisma.persona.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.persona`: Exposes CRUD operations for the **persona** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personas
    * const personas = await prisma.persona.findMany()
    * ```
    */
  get persona(): Prisma.personaDelegate<ExtArgs>;

  /**
   * `prisma.encuesta`: Exposes CRUD operations for the **encuesta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Encuestas
    * const encuestas = await prisma.encuesta.findMany()
    * ```
    */
  get encuesta(): Prisma.encuestaDelegate<ExtArgs>;

  /**
   * `prisma.registro`: Exposes CRUD operations for the **registro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registros
    * const registros = await prisma.registro.findMany()
    * ```
    */
  get registro(): Prisma.registroDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    persona: 'persona',
    encuesta: 'encuesta',
    registro: 'registro'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'persona' | 'encuesta' | 'registro'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      persona: {
        payload: Prisma.$personaPayload<ExtArgs>
        fields: Prisma.personaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.personaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.personaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>
          }
          findFirst: {
            args: Prisma.personaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.personaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>
          }
          findMany: {
            args: Prisma.personaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>[]
          }
          create: {
            args: Prisma.personaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>
          }
          createMany: {
            args: Prisma.personaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.personaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>[]
          }
          delete: {
            args: Prisma.personaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>
          }
          update: {
            args: Prisma.personaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>
          }
          deleteMany: {
            args: Prisma.personaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.personaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.personaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personaPayload>
          }
          aggregate: {
            args: Prisma.PersonaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePersona>
          }
          groupBy: {
            args: Prisma.personaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonaGroupByOutputType>[]
          }
          count: {
            args: Prisma.personaCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonaCountAggregateOutputType> | number
          }
        }
      }
      encuesta: {
        payload: Prisma.$encuestaPayload<ExtArgs>
        fields: Prisma.encuestaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.encuestaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.encuestaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>
          }
          findFirst: {
            args: Prisma.encuestaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.encuestaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>
          }
          findMany: {
            args: Prisma.encuestaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>[]
          }
          create: {
            args: Prisma.encuestaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>
          }
          createMany: {
            args: Prisma.encuestaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.encuestaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>[]
          }
          delete: {
            args: Prisma.encuestaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>
          }
          update: {
            args: Prisma.encuestaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>
          }
          deleteMany: {
            args: Prisma.encuestaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.encuestaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.encuestaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$encuestaPayload>
          }
          aggregate: {
            args: Prisma.EncuestaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEncuesta>
          }
          groupBy: {
            args: Prisma.encuestaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EncuestaGroupByOutputType>[]
          }
          count: {
            args: Prisma.encuestaCountArgs<ExtArgs>,
            result: $Utils.Optional<EncuestaCountAggregateOutputType> | number
          }
        }
      }
      registro: {
        payload: Prisma.$registroPayload<ExtArgs>
        fields: Prisma.registroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.registroFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.registroFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>
          }
          findFirst: {
            args: Prisma.registroFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.registroFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>
          }
          findMany: {
            args: Prisma.registroFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>[]
          }
          create: {
            args: Prisma.registroCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>
          }
          createMany: {
            args: Prisma.registroCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.registroCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>[]
          }
          delete: {
            args: Prisma.registroDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>
          }
          update: {
            args: Prisma.registroUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>
          }
          deleteMany: {
            args: Prisma.registroDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.registroUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.registroUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$registroPayload>
          }
          aggregate: {
            args: Prisma.RegistroAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRegistro>
          }
          groupBy: {
            args: Prisma.registroGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RegistroGroupByOutputType>[]
          }
          count: {
            args: Prisma.registroCountArgs<ExtArgs>,
            result: $Utils.Optional<RegistroCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PersonaCountOutputType
   */

  export type PersonaCountOutputType = {
    registros: number
  }

  export type PersonaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | PersonaCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonaCountOutputType
     */
    select?: PersonaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registroWhereInput
  }


  /**
   * Count Type EncuestaCountOutputType
   */

  export type EncuestaCountOutputType = {
    registros: number
  }

  export type EncuestaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | EncuestaCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * EncuestaCountOutputType without action
   */
  export type EncuestaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncuestaCountOutputType
     */
    select?: EncuestaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EncuestaCountOutputType without action
   */
  export type EncuestaCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registroWhereInput
  }


  /**
   * Models
   */

  /**
   * Model persona
   */

  export type AggregatePersona = {
    _count: PersonaCountAggregateOutputType | null
    _avg: PersonaAvgAggregateOutputType | null
    _sum: PersonaSumAggregateOutputType | null
    _min: PersonaMinAggregateOutputType | null
    _max: PersonaMaxAggregateOutputType | null
  }

  export type PersonaAvgAggregateOutputType = {
    id: number | null
  }

  export type PersonaSumAggregateOutputType = {
    id: number | null
  }

  export type PersonaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    identificacion: string | null
  }

  export type PersonaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    identificacion: string | null
  }

  export type PersonaCountAggregateOutputType = {
    id: number
    nombre: number
    identificacion: number
    _all: number
  }


  export type PersonaAvgAggregateInputType = {
    id?: true
  }

  export type PersonaSumAggregateInputType = {
    id?: true
  }

  export type PersonaMinAggregateInputType = {
    id?: true
    nombre?: true
    identificacion?: true
  }

  export type PersonaMaxAggregateInputType = {
    id?: true
    nombre?: true
    identificacion?: true
  }

  export type PersonaCountAggregateInputType = {
    id?: true
    nombre?: true
    identificacion?: true
    _all?: true
  }

  export type PersonaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which persona to aggregate.
     */
    where?: personaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personas to fetch.
     */
    orderBy?: personaOrderByWithRelationInput | personaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: personaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned personas
    **/
    _count?: true | PersonaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonaMaxAggregateInputType
  }

  export type GetPersonaAggregateType<T extends PersonaAggregateArgs> = {
        [P in keyof T & keyof AggregatePersona]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersona[P]>
      : GetScalarType<T[P], AggregatePersona[P]>
  }




  export type personaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: personaWhereInput
    orderBy?: personaOrderByWithAggregationInput | personaOrderByWithAggregationInput[]
    by: PersonaScalarFieldEnum[] | PersonaScalarFieldEnum
    having?: personaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonaCountAggregateInputType | true
    _avg?: PersonaAvgAggregateInputType
    _sum?: PersonaSumAggregateInputType
    _min?: PersonaMinAggregateInputType
    _max?: PersonaMaxAggregateInputType
  }

  export type PersonaGroupByOutputType = {
    id: number
    nombre: string
    identificacion: string
    _count: PersonaCountAggregateOutputType | null
    _avg: PersonaAvgAggregateOutputType | null
    _sum: PersonaSumAggregateOutputType | null
    _min: PersonaMinAggregateOutputType | null
    _max: PersonaMaxAggregateOutputType | null
  }

  type GetPersonaGroupByPayload<T extends personaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonaGroupByOutputType[P]>
            : GetScalarType<T[P], PersonaGroupByOutputType[P]>
        }
      >
    >


  export type personaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    identificacion?: boolean
    registros?: boolean | persona$registrosArgs<ExtArgs>
    _count?: boolean | PersonaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["persona"]>

  export type personaSelectScalar = {
    id?: boolean
    nombre?: boolean
    identificacion?: boolean
  }


  export type personaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | persona$registrosArgs<ExtArgs>
    _count?: boolean | PersonaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $personaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "persona"
    objects: {
      registros: Prisma.$registroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      identificacion: string
    }, ExtArgs["result"]["persona"]>
    composites: {}
  }


  type personaGetPayload<S extends boolean | null | undefined | personaDefaultArgs> = $Result.GetResult<Prisma.$personaPayload, S>

  type personaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<personaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonaCountAggregateInputType | true
    }

  export interface personaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['persona'], meta: { name: 'persona' } }
    /**
     * Find zero or one Persona that matches the filter.
     * @param {personaFindUniqueArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends personaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, personaFindUniqueArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Persona that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {personaFindUniqueOrThrowArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends personaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, personaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Persona that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personaFindFirstArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends personaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, personaFindFirstArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Persona that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personaFindFirstOrThrowArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends personaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, personaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Personas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personas
     * const personas = await prisma.persona.findMany()
     * 
     * // Get first 10 Personas
     * const personas = await prisma.persona.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personaWithIdOnly = await prisma.persona.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends personaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, personaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Persona.
     * @param {personaCreateArgs} args - Arguments to create a Persona.
     * @example
     * // Create one Persona
     * const Persona = await prisma.persona.create({
     *   data: {
     *     // ... data to create a Persona
     *   }
     * })
     * 
    **/
    create<T extends personaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, personaCreateArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Personas.
     * @param {personaCreateManyArgs} args - Arguments to create many Personas.
     * @example
     * // Create many Personas
     * const persona = await prisma.persona.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends personaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, personaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Personas and returns the data saved in the database.
     * @param {personaCreateManyAndReturnArgs} args - Arguments to create many Personas.
     * @example
     * // Create many Personas
     * const persona = await prisma.persona.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Personas and only return the `id`
     * const personaWithIdOnly = await prisma.persona.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends personaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, personaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Persona.
     * @param {personaDeleteArgs} args - Arguments to delete one Persona.
     * @example
     * // Delete one Persona
     * const Persona = await prisma.persona.delete({
     *   where: {
     *     // ... filter to delete one Persona
     *   }
     * })
     * 
    **/
    delete<T extends personaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, personaDeleteArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Persona.
     * @param {personaUpdateArgs} args - Arguments to update one Persona.
     * @example
     * // Update one Persona
     * const persona = await prisma.persona.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends personaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, personaUpdateArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Personas.
     * @param {personaDeleteManyArgs} args - Arguments to filter Personas to delete.
     * @example
     * // Delete a few Personas
     * const { count } = await prisma.persona.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends personaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, personaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personas
     * const persona = await prisma.persona.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends personaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, personaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Persona.
     * @param {personaUpsertArgs} args - Arguments to update or create a Persona.
     * @example
     * // Update or create a Persona
     * const persona = await prisma.persona.upsert({
     *   create: {
     *     // ... data to create a Persona
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Persona we want to update
     *   }
     * })
    **/
    upsert<T extends personaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, personaUpsertArgs<ExtArgs>>
    ): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Personas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personaCountArgs} args - Arguments to filter Personas to count.
     * @example
     * // Count the number of Personas
     * const count = await prisma.persona.count({
     *   where: {
     *     // ... the filter for the Personas we want to count
     *   }
     * })
    **/
    count<T extends personaCountArgs>(
      args?: Subset<T, personaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Persona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonaAggregateArgs>(args: Subset<T, PersonaAggregateArgs>): Prisma.PrismaPromise<GetPersonaAggregateType<T>>

    /**
     * Group by Persona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends personaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: personaGroupByArgs['orderBy'] }
        : { orderBy?: personaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, personaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the persona model
   */
  readonly fields: personaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for persona.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__personaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    registros<T extends persona$registrosArgs<ExtArgs> = {}>(args?: Subset<T, persona$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the persona model
   */ 
  interface personaFieldRefs {
    readonly id: FieldRef<"persona", 'Int'>
    readonly nombre: FieldRef<"persona", 'String'>
    readonly identificacion: FieldRef<"persona", 'String'>
  }
    

  // Custom InputTypes
  /**
   * persona findUnique
   */
  export type personaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * Filter, which persona to fetch.
     */
    where: personaWhereUniqueInput
  }

  /**
   * persona findUniqueOrThrow
   */
  export type personaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * Filter, which persona to fetch.
     */
    where: personaWhereUniqueInput
  }

  /**
   * persona findFirst
   */
  export type personaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * Filter, which persona to fetch.
     */
    where?: personaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personas to fetch.
     */
    orderBy?: personaOrderByWithRelationInput | personaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for personas.
     */
    cursor?: personaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of personas.
     */
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }

  /**
   * persona findFirstOrThrow
   */
  export type personaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * Filter, which persona to fetch.
     */
    where?: personaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personas to fetch.
     */
    orderBy?: personaOrderByWithRelationInput | personaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for personas.
     */
    cursor?: personaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of personas.
     */
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }

  /**
   * persona findMany
   */
  export type personaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * Filter, which personas to fetch.
     */
    where?: personaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personas to fetch.
     */
    orderBy?: personaOrderByWithRelationInput | personaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing personas.
     */
    cursor?: personaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personas.
     */
    skip?: number
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }

  /**
   * persona create
   */
  export type personaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * The data needed to create a persona.
     */
    data: XOR<personaCreateInput, personaUncheckedCreateInput>
  }

  /**
   * persona createMany
   */
  export type personaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many personas.
     */
    data: personaCreateManyInput | personaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * persona createManyAndReturn
   */
  export type personaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * The data used to create many personas.
     */
    data: personaCreateManyInput | personaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * persona update
   */
  export type personaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * The data needed to update a persona.
     */
    data: XOR<personaUpdateInput, personaUncheckedUpdateInput>
    /**
     * Choose, which persona to update.
     */
    where: personaWhereUniqueInput
  }

  /**
   * persona updateMany
   */
  export type personaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update personas.
     */
    data: XOR<personaUpdateManyMutationInput, personaUncheckedUpdateManyInput>
    /**
     * Filter which personas to update
     */
    where?: personaWhereInput
  }

  /**
   * persona upsert
   */
  export type personaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * The filter to search for the persona to update in case it exists.
     */
    where: personaWhereUniqueInput
    /**
     * In case the persona found by the `where` argument doesn't exist, create a new persona with this data.
     */
    create: XOR<personaCreateInput, personaUncheckedCreateInput>
    /**
     * In case the persona was found with the provided `where` argument, update it with this data.
     */
    update: XOR<personaUpdateInput, personaUncheckedUpdateInput>
  }

  /**
   * persona delete
   */
  export type personaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
    /**
     * Filter which persona to delete.
     */
    where: personaWhereUniqueInput
  }

  /**
   * persona deleteMany
   */
  export type personaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which personas to delete
     */
    where?: personaWhereInput
  }

  /**
   * persona.registros
   */
  export type persona$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    where?: registroWhereInput
    orderBy?: registroOrderByWithRelationInput | registroOrderByWithRelationInput[]
    cursor?: registroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * persona without action
   */
  export type personaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the persona
     */
    select?: personaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: personaInclude<ExtArgs> | null
  }


  /**
   * Model encuesta
   */

  export type AggregateEncuesta = {
    _count: EncuestaCountAggregateOutputType | null
    _avg: EncuestaAvgAggregateOutputType | null
    _sum: EncuestaSumAggregateOutputType | null
    _min: EncuestaMinAggregateOutputType | null
    _max: EncuestaMaxAggregateOutputType | null
  }

  export type EncuestaAvgAggregateOutputType = {
    id: number | null
  }

  export type EncuestaSumAggregateOutputType = {
    id: number | null
  }

  export type EncuestaMinAggregateOutputType = {
    id: number | null
    descripcion: string | null
    detalles: string | null
  }

  export type EncuestaMaxAggregateOutputType = {
    id: number | null
    descripcion: string | null
    detalles: string | null
  }

  export type EncuestaCountAggregateOutputType = {
    id: number
    descripcion: number
    detalles: number
    _all: number
  }


  export type EncuestaAvgAggregateInputType = {
    id?: true
  }

  export type EncuestaSumAggregateInputType = {
    id?: true
  }

  export type EncuestaMinAggregateInputType = {
    id?: true
    descripcion?: true
    detalles?: true
  }

  export type EncuestaMaxAggregateInputType = {
    id?: true
    descripcion?: true
    detalles?: true
  }

  export type EncuestaCountAggregateInputType = {
    id?: true
    descripcion?: true
    detalles?: true
    _all?: true
  }

  export type EncuestaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which encuesta to aggregate.
     */
    where?: encuestaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of encuestas to fetch.
     */
    orderBy?: encuestaOrderByWithRelationInput | encuestaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: encuestaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` encuestas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` encuestas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned encuestas
    **/
    _count?: true | EncuestaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EncuestaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EncuestaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EncuestaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EncuestaMaxAggregateInputType
  }

  export type GetEncuestaAggregateType<T extends EncuestaAggregateArgs> = {
        [P in keyof T & keyof AggregateEncuesta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEncuesta[P]>
      : GetScalarType<T[P], AggregateEncuesta[P]>
  }




  export type encuestaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: encuestaWhereInput
    orderBy?: encuestaOrderByWithAggregationInput | encuestaOrderByWithAggregationInput[]
    by: EncuestaScalarFieldEnum[] | EncuestaScalarFieldEnum
    having?: encuestaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EncuestaCountAggregateInputType | true
    _avg?: EncuestaAvgAggregateInputType
    _sum?: EncuestaSumAggregateInputType
    _min?: EncuestaMinAggregateInputType
    _max?: EncuestaMaxAggregateInputType
  }

  export type EncuestaGroupByOutputType = {
    id: number
    descripcion: string
    detalles: string
    _count: EncuestaCountAggregateOutputType | null
    _avg: EncuestaAvgAggregateOutputType | null
    _sum: EncuestaSumAggregateOutputType | null
    _min: EncuestaMinAggregateOutputType | null
    _max: EncuestaMaxAggregateOutputType | null
  }

  type GetEncuestaGroupByPayload<T extends encuestaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EncuestaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EncuestaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EncuestaGroupByOutputType[P]>
            : GetScalarType<T[P], EncuestaGroupByOutputType[P]>
        }
      >
    >


  export type encuestaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    detalles?: boolean
    registros?: boolean | encuesta$registrosArgs<ExtArgs>
    _count?: boolean | EncuestaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["encuesta"]>

  export type encuestaSelectScalar = {
    id?: boolean
    descripcion?: boolean
    detalles?: boolean
  }


  export type encuestaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | encuesta$registrosArgs<ExtArgs>
    _count?: boolean | EncuestaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $encuestaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "encuesta"
    objects: {
      registros: Prisma.$registroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descripcion: string
      detalles: string
    }, ExtArgs["result"]["encuesta"]>
    composites: {}
  }


  type encuestaGetPayload<S extends boolean | null | undefined | encuestaDefaultArgs> = $Result.GetResult<Prisma.$encuestaPayload, S>

  type encuestaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<encuestaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EncuestaCountAggregateInputType | true
    }

  export interface encuestaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['encuesta'], meta: { name: 'encuesta' } }
    /**
     * Find zero or one Encuesta that matches the filter.
     * @param {encuestaFindUniqueArgs} args - Arguments to find a Encuesta
     * @example
     * // Get one Encuesta
     * const encuesta = await prisma.encuesta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends encuestaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, encuestaFindUniqueArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Encuesta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {encuestaFindUniqueOrThrowArgs} args - Arguments to find a Encuesta
     * @example
     * // Get one Encuesta
     * const encuesta = await prisma.encuesta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends encuestaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Encuesta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {encuestaFindFirstArgs} args - Arguments to find a Encuesta
     * @example
     * // Get one Encuesta
     * const encuesta = await prisma.encuesta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends encuestaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaFindFirstArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Encuesta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {encuestaFindFirstOrThrowArgs} args - Arguments to find a Encuesta
     * @example
     * // Get one Encuesta
     * const encuesta = await prisma.encuesta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends encuestaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Encuestas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {encuestaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Encuestas
     * const encuestas = await prisma.encuesta.findMany()
     * 
     * // Get first 10 Encuestas
     * const encuestas = await prisma.encuesta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const encuestaWithIdOnly = await prisma.encuesta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends encuestaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Encuesta.
     * @param {encuestaCreateArgs} args - Arguments to create a Encuesta.
     * @example
     * // Create one Encuesta
     * const Encuesta = await prisma.encuesta.create({
     *   data: {
     *     // ... data to create a Encuesta
     *   }
     * })
     * 
    **/
    create<T extends encuestaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, encuestaCreateArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Encuestas.
     * @param {encuestaCreateManyArgs} args - Arguments to create many Encuestas.
     * @example
     * // Create many Encuestas
     * const encuesta = await prisma.encuesta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends encuestaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Encuestas and returns the data saved in the database.
     * @param {encuestaCreateManyAndReturnArgs} args - Arguments to create many Encuestas.
     * @example
     * // Create many Encuestas
     * const encuesta = await prisma.encuesta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Encuestas and only return the `id`
     * const encuestaWithIdOnly = await prisma.encuesta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends encuestaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Encuesta.
     * @param {encuestaDeleteArgs} args - Arguments to delete one Encuesta.
     * @example
     * // Delete one Encuesta
     * const Encuesta = await prisma.encuesta.delete({
     *   where: {
     *     // ... filter to delete one Encuesta
     *   }
     * })
     * 
    **/
    delete<T extends encuestaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, encuestaDeleteArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Encuesta.
     * @param {encuestaUpdateArgs} args - Arguments to update one Encuesta.
     * @example
     * // Update one Encuesta
     * const encuesta = await prisma.encuesta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends encuestaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, encuestaUpdateArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Encuestas.
     * @param {encuestaDeleteManyArgs} args - Arguments to filter Encuestas to delete.
     * @example
     * // Delete a few Encuestas
     * const { count } = await prisma.encuesta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends encuestaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, encuestaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Encuestas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {encuestaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Encuestas
     * const encuesta = await prisma.encuesta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends encuestaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, encuestaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Encuesta.
     * @param {encuestaUpsertArgs} args - Arguments to update or create a Encuesta.
     * @example
     * // Update or create a Encuesta
     * const encuesta = await prisma.encuesta.upsert({
     *   create: {
     *     // ... data to create a Encuesta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Encuesta we want to update
     *   }
     * })
    **/
    upsert<T extends encuestaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, encuestaUpsertArgs<ExtArgs>>
    ): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Encuestas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {encuestaCountArgs} args - Arguments to filter Encuestas to count.
     * @example
     * // Count the number of Encuestas
     * const count = await prisma.encuesta.count({
     *   where: {
     *     // ... the filter for the Encuestas we want to count
     *   }
     * })
    **/
    count<T extends encuestaCountArgs>(
      args?: Subset<T, encuestaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EncuestaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Encuesta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncuestaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EncuestaAggregateArgs>(args: Subset<T, EncuestaAggregateArgs>): Prisma.PrismaPromise<GetEncuestaAggregateType<T>>

    /**
     * Group by Encuesta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {encuestaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends encuestaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: encuestaGroupByArgs['orderBy'] }
        : { orderBy?: encuestaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, encuestaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEncuestaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the encuesta model
   */
  readonly fields: encuestaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for encuesta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__encuestaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    registros<T extends encuesta$registrosArgs<ExtArgs> = {}>(args?: Subset<T, encuesta$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the encuesta model
   */ 
  interface encuestaFieldRefs {
    readonly id: FieldRef<"encuesta", 'Int'>
    readonly descripcion: FieldRef<"encuesta", 'String'>
    readonly detalles: FieldRef<"encuesta", 'String'>
  }
    

  // Custom InputTypes
  /**
   * encuesta findUnique
   */
  export type encuestaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * Filter, which encuesta to fetch.
     */
    where: encuestaWhereUniqueInput
  }

  /**
   * encuesta findUniqueOrThrow
   */
  export type encuestaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * Filter, which encuesta to fetch.
     */
    where: encuestaWhereUniqueInput
  }

  /**
   * encuesta findFirst
   */
  export type encuestaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * Filter, which encuesta to fetch.
     */
    where?: encuestaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of encuestas to fetch.
     */
    orderBy?: encuestaOrderByWithRelationInput | encuestaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for encuestas.
     */
    cursor?: encuestaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` encuestas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` encuestas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of encuestas.
     */
    distinct?: EncuestaScalarFieldEnum | EncuestaScalarFieldEnum[]
  }

  /**
   * encuesta findFirstOrThrow
   */
  export type encuestaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * Filter, which encuesta to fetch.
     */
    where?: encuestaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of encuestas to fetch.
     */
    orderBy?: encuestaOrderByWithRelationInput | encuestaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for encuestas.
     */
    cursor?: encuestaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` encuestas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` encuestas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of encuestas.
     */
    distinct?: EncuestaScalarFieldEnum | EncuestaScalarFieldEnum[]
  }

  /**
   * encuesta findMany
   */
  export type encuestaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * Filter, which encuestas to fetch.
     */
    where?: encuestaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of encuestas to fetch.
     */
    orderBy?: encuestaOrderByWithRelationInput | encuestaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing encuestas.
     */
    cursor?: encuestaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` encuestas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` encuestas.
     */
    skip?: number
    distinct?: EncuestaScalarFieldEnum | EncuestaScalarFieldEnum[]
  }

  /**
   * encuesta create
   */
  export type encuestaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * The data needed to create a encuesta.
     */
    data: XOR<encuestaCreateInput, encuestaUncheckedCreateInput>
  }

  /**
   * encuesta createMany
   */
  export type encuestaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many encuestas.
     */
    data: encuestaCreateManyInput | encuestaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * encuesta createManyAndReturn
   */
  export type encuestaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * The data used to create many encuestas.
     */
    data: encuestaCreateManyInput | encuestaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * encuesta update
   */
  export type encuestaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * The data needed to update a encuesta.
     */
    data: XOR<encuestaUpdateInput, encuestaUncheckedUpdateInput>
    /**
     * Choose, which encuesta to update.
     */
    where: encuestaWhereUniqueInput
  }

  /**
   * encuesta updateMany
   */
  export type encuestaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update encuestas.
     */
    data: XOR<encuestaUpdateManyMutationInput, encuestaUncheckedUpdateManyInput>
    /**
     * Filter which encuestas to update
     */
    where?: encuestaWhereInput
  }

  /**
   * encuesta upsert
   */
  export type encuestaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * The filter to search for the encuesta to update in case it exists.
     */
    where: encuestaWhereUniqueInput
    /**
     * In case the encuesta found by the `where` argument doesn't exist, create a new encuesta with this data.
     */
    create: XOR<encuestaCreateInput, encuestaUncheckedCreateInput>
    /**
     * In case the encuesta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<encuestaUpdateInput, encuestaUncheckedUpdateInput>
  }

  /**
   * encuesta delete
   */
  export type encuestaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
    /**
     * Filter which encuesta to delete.
     */
    where: encuestaWhereUniqueInput
  }

  /**
   * encuesta deleteMany
   */
  export type encuestaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which encuestas to delete
     */
    where?: encuestaWhereInput
  }

  /**
   * encuesta.registros
   */
  export type encuesta$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    where?: registroWhereInput
    orderBy?: registroOrderByWithRelationInput | registroOrderByWithRelationInput[]
    cursor?: registroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * encuesta without action
   */
  export type encuestaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the encuesta
     */
    select?: encuestaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: encuestaInclude<ExtArgs> | null
  }


  /**
   * Model registro
   */

  export type AggregateRegistro = {
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  export type RegistroAvgAggregateOutputType = {
    id: number | null
    personaId: number | null
    encuestaId: number | null
  }

  export type RegistroSumAggregateOutputType = {
    id: number | null
    personaId: number | null
    encuestaId: number | null
  }

  export type RegistroMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    hora: Date | null
    ubicacion: string | null
    personaId: number | null
    encuestaId: number | null
  }

  export type RegistroMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    hora: Date | null
    ubicacion: string | null
    personaId: number | null
    encuestaId: number | null
  }

  export type RegistroCountAggregateOutputType = {
    id: number
    fecha: number
    hora: number
    ubicacion: number
    personaId: number
    encuestaId: number
    _all: number
  }


  export type RegistroAvgAggregateInputType = {
    id?: true
    personaId?: true
    encuestaId?: true
  }

  export type RegistroSumAggregateInputType = {
    id?: true
    personaId?: true
    encuestaId?: true
  }

  export type RegistroMinAggregateInputType = {
    id?: true
    fecha?: true
    hora?: true
    ubicacion?: true
    personaId?: true
    encuestaId?: true
  }

  export type RegistroMaxAggregateInputType = {
    id?: true
    fecha?: true
    hora?: true
    ubicacion?: true
    personaId?: true
    encuestaId?: true
  }

  export type RegistroCountAggregateInputType = {
    id?: true
    fecha?: true
    hora?: true
    ubicacion?: true
    personaId?: true
    encuestaId?: true
    _all?: true
  }

  export type RegistroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registro to aggregate.
     */
    where?: registroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registros to fetch.
     */
    orderBy?: registroOrderByWithRelationInput | registroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: registroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned registros
    **/
    _count?: true | RegistroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistroMaxAggregateInputType
  }

  export type GetRegistroAggregateType<T extends RegistroAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistro[P]>
      : GetScalarType<T[P], AggregateRegistro[P]>
  }




  export type registroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registroWhereInput
    orderBy?: registroOrderByWithAggregationInput | registroOrderByWithAggregationInput[]
    by: RegistroScalarFieldEnum[] | RegistroScalarFieldEnum
    having?: registroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistroCountAggregateInputType | true
    _avg?: RegistroAvgAggregateInputType
    _sum?: RegistroSumAggregateInputType
    _min?: RegistroMinAggregateInputType
    _max?: RegistroMaxAggregateInputType
  }

  export type RegistroGroupByOutputType = {
    id: number
    fecha: Date
    hora: Date
    ubicacion: string
    personaId: number
    encuestaId: number
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  type GetRegistroGroupByPayload<T extends registroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistroGroupByOutputType[P]>
            : GetScalarType<T[P], RegistroGroupByOutputType[P]>
        }
      >
    >


  export type registroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    hora?: boolean
    ubicacion?: boolean
    personaId?: boolean
    encuestaId?: boolean
    persona?: boolean | personaDefaultArgs<ExtArgs>
    encuesta?: boolean | encuestaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type registroSelectScalar = {
    id?: boolean
    fecha?: boolean
    hora?: boolean
    ubicacion?: boolean
    personaId?: boolean
    encuestaId?: boolean
  }


  export type registroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    persona?: boolean | personaDefaultArgs<ExtArgs>
    encuesta?: boolean | encuestaDefaultArgs<ExtArgs>
  }


  export type $registroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "registro"
    objects: {
      persona: Prisma.$personaPayload<ExtArgs>
      encuesta: Prisma.$encuestaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fecha: Date
      hora: Date
      ubicacion: string
      personaId: number
      encuestaId: number
    }, ExtArgs["result"]["registro"]>
    composites: {}
  }


  type registroGetPayload<S extends boolean | null | undefined | registroDefaultArgs> = $Result.GetResult<Prisma.$registroPayload, S>

  type registroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<registroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegistroCountAggregateInputType | true
    }

  export interface registroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['registro'], meta: { name: 'registro' } }
    /**
     * Find zero or one Registro that matches the filter.
     * @param {registroFindUniqueArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends registroFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, registroFindUniqueArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Registro that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {registroFindUniqueOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends registroFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, registroFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Registro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registroFindFirstArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends registroFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, registroFindFirstArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Registro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registroFindFirstOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends registroFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, registroFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Registros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registros
     * const registros = await prisma.registro.findMany()
     * 
     * // Get first 10 Registros
     * const registros = await prisma.registro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registroWithIdOnly = await prisma.registro.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends registroFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, registroFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Registro.
     * @param {registroCreateArgs} args - Arguments to create a Registro.
     * @example
     * // Create one Registro
     * const Registro = await prisma.registro.create({
     *   data: {
     *     // ... data to create a Registro
     *   }
     * })
     * 
    **/
    create<T extends registroCreateArgs<ExtArgs>>(
      args: SelectSubset<T, registroCreateArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Registros.
     * @param {registroCreateManyArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends registroCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, registroCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registros and returns the data saved in the database.
     * @param {registroCreateManyAndReturnArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registros and only return the `id`
     * const registroWithIdOnly = await prisma.registro.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends registroCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, registroCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Registro.
     * @param {registroDeleteArgs} args - Arguments to delete one Registro.
     * @example
     * // Delete one Registro
     * const Registro = await prisma.registro.delete({
     *   where: {
     *     // ... filter to delete one Registro
     *   }
     * })
     * 
    **/
    delete<T extends registroDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, registroDeleteArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Registro.
     * @param {registroUpdateArgs} args - Arguments to update one Registro.
     * @example
     * // Update one Registro
     * const registro = await prisma.registro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends registroUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, registroUpdateArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Registros.
     * @param {registroDeleteManyArgs} args - Arguments to filter Registros to delete.
     * @example
     * // Delete a few Registros
     * const { count } = await prisma.registro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends registroDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, registroDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registros
     * const registro = await prisma.registro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends registroUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, registroUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Registro.
     * @param {registroUpsertArgs} args - Arguments to update or create a Registro.
     * @example
     * // Update or create a Registro
     * const registro = await prisma.registro.upsert({
     *   create: {
     *     // ... data to create a Registro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registro we want to update
     *   }
     * })
    **/
    upsert<T extends registroUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, registroUpsertArgs<ExtArgs>>
    ): Prisma__registroClient<$Result.GetResult<Prisma.$registroPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registroCountArgs} args - Arguments to filter Registros to count.
     * @example
     * // Count the number of Registros
     * const count = await prisma.registro.count({
     *   where: {
     *     // ... the filter for the Registros we want to count
     *   }
     * })
    **/
    count<T extends registroCountArgs>(
      args?: Subset<T, registroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistroAggregateArgs>(args: Subset<T, RegistroAggregateArgs>): Prisma.PrismaPromise<GetRegistroAggregateType<T>>

    /**
     * Group by Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends registroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: registroGroupByArgs['orderBy'] }
        : { orderBy?: registroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, registroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the registro model
   */
  readonly fields: registroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for registro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__registroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    persona<T extends personaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, personaDefaultArgs<ExtArgs>>): Prisma__personaClient<$Result.GetResult<Prisma.$personaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    encuesta<T extends encuestaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, encuestaDefaultArgs<ExtArgs>>): Prisma__encuestaClient<$Result.GetResult<Prisma.$encuestaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the registro model
   */ 
  interface registroFieldRefs {
    readonly id: FieldRef<"registro", 'Int'>
    readonly fecha: FieldRef<"registro", 'DateTime'>
    readonly hora: FieldRef<"registro", 'DateTime'>
    readonly ubicacion: FieldRef<"registro", 'String'>
    readonly personaId: FieldRef<"registro", 'Int'>
    readonly encuestaId: FieldRef<"registro", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * registro findUnique
   */
  export type registroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * Filter, which registro to fetch.
     */
    where: registroWhereUniqueInput
  }

  /**
   * registro findUniqueOrThrow
   */
  export type registroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * Filter, which registro to fetch.
     */
    where: registroWhereUniqueInput
  }

  /**
   * registro findFirst
   */
  export type registroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * Filter, which registro to fetch.
     */
    where?: registroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registros to fetch.
     */
    orderBy?: registroOrderByWithRelationInput | registroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registros.
     */
    cursor?: registroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * registro findFirstOrThrow
   */
  export type registroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * Filter, which registro to fetch.
     */
    where?: registroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registros to fetch.
     */
    orderBy?: registroOrderByWithRelationInput | registroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registros.
     */
    cursor?: registroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * registro findMany
   */
  export type registroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * Filter, which registros to fetch.
     */
    where?: registroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registros to fetch.
     */
    orderBy?: registroOrderByWithRelationInput | registroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing registros.
     */
    cursor?: registroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registros.
     */
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * registro create
   */
  export type registroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * The data needed to create a registro.
     */
    data: XOR<registroCreateInput, registroUncheckedCreateInput>
  }

  /**
   * registro createMany
   */
  export type registroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many registros.
     */
    data: registroCreateManyInput | registroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * registro createManyAndReturn
   */
  export type registroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * The data used to create many registros.
     */
    data: registroCreateManyInput | registroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * registro update
   */
  export type registroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * The data needed to update a registro.
     */
    data: XOR<registroUpdateInput, registroUncheckedUpdateInput>
    /**
     * Choose, which registro to update.
     */
    where: registroWhereUniqueInput
  }

  /**
   * registro updateMany
   */
  export type registroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update registros.
     */
    data: XOR<registroUpdateManyMutationInput, registroUncheckedUpdateManyInput>
    /**
     * Filter which registros to update
     */
    where?: registroWhereInput
  }

  /**
   * registro upsert
   */
  export type registroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * The filter to search for the registro to update in case it exists.
     */
    where: registroWhereUniqueInput
    /**
     * In case the registro found by the `where` argument doesn't exist, create a new registro with this data.
     */
    create: XOR<registroCreateInput, registroUncheckedCreateInput>
    /**
     * In case the registro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<registroUpdateInput, registroUncheckedUpdateInput>
  }

  /**
   * registro delete
   */
  export type registroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
    /**
     * Filter which registro to delete.
     */
    where: registroWhereUniqueInput
  }

  /**
   * registro deleteMany
   */
  export type registroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registros to delete
     */
    where?: registroWhereInput
  }

  /**
   * registro without action
   */
  export type registroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registro
     */
    select?: registroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registroInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PersonaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    identificacion: 'identificacion'
  };

  export type PersonaScalarFieldEnum = (typeof PersonaScalarFieldEnum)[keyof typeof PersonaScalarFieldEnum]


  export const EncuestaScalarFieldEnum: {
    id: 'id',
    descripcion: 'descripcion',
    detalles: 'detalles'
  };

  export type EncuestaScalarFieldEnum = (typeof EncuestaScalarFieldEnum)[keyof typeof EncuestaScalarFieldEnum]


  export const RegistroScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    hora: 'hora',
    ubicacion: 'ubicacion',
    personaId: 'personaId',
    encuestaId: 'encuestaId'
  };

  export type RegistroScalarFieldEnum = (typeof RegistroScalarFieldEnum)[keyof typeof RegistroScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type personaWhereInput = {
    AND?: personaWhereInput | personaWhereInput[]
    OR?: personaWhereInput[]
    NOT?: personaWhereInput | personaWhereInput[]
    id?: IntFilter<"persona"> | number
    nombre?: StringFilter<"persona"> | string
    identificacion?: StringFilter<"persona"> | string
    registros?: RegistroListRelationFilter
  }

  export type personaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    identificacion?: SortOrder
    registros?: registroOrderByRelationAggregateInput
  }

  export type personaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: personaWhereInput | personaWhereInput[]
    OR?: personaWhereInput[]
    NOT?: personaWhereInput | personaWhereInput[]
    nombre?: StringFilter<"persona"> | string
    identificacion?: StringFilter<"persona"> | string
    registros?: RegistroListRelationFilter
  }, "id">

  export type personaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    identificacion?: SortOrder
    _count?: personaCountOrderByAggregateInput
    _avg?: personaAvgOrderByAggregateInput
    _max?: personaMaxOrderByAggregateInput
    _min?: personaMinOrderByAggregateInput
    _sum?: personaSumOrderByAggregateInput
  }

  export type personaScalarWhereWithAggregatesInput = {
    AND?: personaScalarWhereWithAggregatesInput | personaScalarWhereWithAggregatesInput[]
    OR?: personaScalarWhereWithAggregatesInput[]
    NOT?: personaScalarWhereWithAggregatesInput | personaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"persona"> | number
    nombre?: StringWithAggregatesFilter<"persona"> | string
    identificacion?: StringWithAggregatesFilter<"persona"> | string
  }

  export type encuestaWhereInput = {
    AND?: encuestaWhereInput | encuestaWhereInput[]
    OR?: encuestaWhereInput[]
    NOT?: encuestaWhereInput | encuestaWhereInput[]
    id?: IntFilter<"encuesta"> | number
    descripcion?: StringFilter<"encuesta"> | string
    detalles?: StringFilter<"encuesta"> | string
    registros?: RegistroListRelationFilter
  }

  export type encuestaOrderByWithRelationInput = {
    id?: SortOrder
    descripcion?: SortOrder
    detalles?: SortOrder
    registros?: registroOrderByRelationAggregateInput
  }

  export type encuestaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: encuestaWhereInput | encuestaWhereInput[]
    OR?: encuestaWhereInput[]
    NOT?: encuestaWhereInput | encuestaWhereInput[]
    descripcion?: StringFilter<"encuesta"> | string
    detalles?: StringFilter<"encuesta"> | string
    registros?: RegistroListRelationFilter
  }, "id">

  export type encuestaOrderByWithAggregationInput = {
    id?: SortOrder
    descripcion?: SortOrder
    detalles?: SortOrder
    _count?: encuestaCountOrderByAggregateInput
    _avg?: encuestaAvgOrderByAggregateInput
    _max?: encuestaMaxOrderByAggregateInput
    _min?: encuestaMinOrderByAggregateInput
    _sum?: encuestaSumOrderByAggregateInput
  }

  export type encuestaScalarWhereWithAggregatesInput = {
    AND?: encuestaScalarWhereWithAggregatesInput | encuestaScalarWhereWithAggregatesInput[]
    OR?: encuestaScalarWhereWithAggregatesInput[]
    NOT?: encuestaScalarWhereWithAggregatesInput | encuestaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"encuesta"> | number
    descripcion?: StringWithAggregatesFilter<"encuesta"> | string
    detalles?: StringWithAggregatesFilter<"encuesta"> | string
  }

  export type registroWhereInput = {
    AND?: registroWhereInput | registroWhereInput[]
    OR?: registroWhereInput[]
    NOT?: registroWhereInput | registroWhereInput[]
    id?: IntFilter<"registro"> | number
    fecha?: DateTimeFilter<"registro"> | Date | string
    hora?: DateTimeFilter<"registro"> | Date | string
    ubicacion?: StringFilter<"registro"> | string
    personaId?: IntFilter<"registro"> | number
    encuestaId?: IntFilter<"registro"> | number
    persona?: XOR<PersonaRelationFilter, personaWhereInput>
    encuesta?: XOR<EncuestaRelationFilter, encuestaWhereInput>
  }

  export type registroOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
    persona?: personaOrderByWithRelationInput
    encuesta?: encuestaOrderByWithRelationInput
  }

  export type registroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: registroWhereInput | registroWhereInput[]
    OR?: registroWhereInput[]
    NOT?: registroWhereInput | registroWhereInput[]
    fecha?: DateTimeFilter<"registro"> | Date | string
    hora?: DateTimeFilter<"registro"> | Date | string
    ubicacion?: StringFilter<"registro"> | string
    personaId?: IntFilter<"registro"> | number
    encuestaId?: IntFilter<"registro"> | number
    persona?: XOR<PersonaRelationFilter, personaWhereInput>
    encuesta?: XOR<EncuestaRelationFilter, encuestaWhereInput>
  }, "id">

  export type registroOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
    _count?: registroCountOrderByAggregateInput
    _avg?: registroAvgOrderByAggregateInput
    _max?: registroMaxOrderByAggregateInput
    _min?: registroMinOrderByAggregateInput
    _sum?: registroSumOrderByAggregateInput
  }

  export type registroScalarWhereWithAggregatesInput = {
    AND?: registroScalarWhereWithAggregatesInput | registroScalarWhereWithAggregatesInput[]
    OR?: registroScalarWhereWithAggregatesInput[]
    NOT?: registroScalarWhereWithAggregatesInput | registroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"registro"> | number
    fecha?: DateTimeWithAggregatesFilter<"registro"> | Date | string
    hora?: DateTimeWithAggregatesFilter<"registro"> | Date | string
    ubicacion?: StringWithAggregatesFilter<"registro"> | string
    personaId?: IntWithAggregatesFilter<"registro"> | number
    encuestaId?: IntWithAggregatesFilter<"registro"> | number
  }

  export type personaCreateInput = {
    nombre: string
    identificacion: string
    registros?: registroCreateNestedManyWithoutPersonaInput
  }

  export type personaUncheckedCreateInput = {
    id?: number
    nombre: string
    identificacion: string
    registros?: registroUncheckedCreateNestedManyWithoutPersonaInput
  }

  export type personaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    registros?: registroUpdateManyWithoutPersonaNestedInput
  }

  export type personaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    registros?: registroUncheckedUpdateManyWithoutPersonaNestedInput
  }

  export type personaCreateManyInput = {
    id?: number
    nombre: string
    identificacion: string
  }

  export type personaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
  }

  export type personaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
  }

  export type encuestaCreateInput = {
    descripcion: string
    detalles: string
    registros?: registroCreateNestedManyWithoutEncuestaInput
  }

  export type encuestaUncheckedCreateInput = {
    id?: number
    descripcion: string
    detalles: string
    registros?: registroUncheckedCreateNestedManyWithoutEncuestaInput
  }

  export type encuestaUpdateInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    detalles?: StringFieldUpdateOperationsInput | string
    registros?: registroUpdateManyWithoutEncuestaNestedInput
  }

  export type encuestaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    detalles?: StringFieldUpdateOperationsInput | string
    registros?: registroUncheckedUpdateManyWithoutEncuestaNestedInput
  }

  export type encuestaCreateManyInput = {
    id?: number
    descripcion: string
    detalles: string
  }

  export type encuestaUpdateManyMutationInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    detalles?: StringFieldUpdateOperationsInput | string
  }

  export type encuestaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    detalles?: StringFieldUpdateOperationsInput | string
  }

  export type registroCreateInput = {
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    persona: personaCreateNestedOneWithoutRegistrosInput
    encuesta: encuestaCreateNestedOneWithoutRegistrosInput
  }

  export type registroUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    personaId: number
    encuestaId: number
  }

  export type registroUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    persona?: personaUpdateOneRequiredWithoutRegistrosNestedInput
    encuesta?: encuestaUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type registroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    personaId?: IntFieldUpdateOperationsInput | number
    encuestaId?: IntFieldUpdateOperationsInput | number
  }

  export type registroCreateManyInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    personaId: number
    encuestaId: number
  }

  export type registroUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
  }

  export type registroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    personaId?: IntFieldUpdateOperationsInput | number
    encuestaId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RegistroListRelationFilter = {
    every?: registroWhereInput
    some?: registroWhereInput
    none?: registroWhereInput
  }

  export type registroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type personaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    identificacion?: SortOrder
  }

  export type personaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type personaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    identificacion?: SortOrder
  }

  export type personaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    identificacion?: SortOrder
  }

  export type personaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type encuestaCountOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    detalles?: SortOrder
  }

  export type encuestaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type encuestaMaxOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    detalles?: SortOrder
  }

  export type encuestaMinOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    detalles?: SortOrder
  }

  export type encuestaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PersonaRelationFilter = {
    is?: personaWhereInput
    isNot?: personaWhereInput
  }

  export type EncuestaRelationFilter = {
    is?: encuestaWhereInput
    isNot?: encuestaWhereInput
  }

  export type registroCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
  }

  export type registroAvgOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
  }

  export type registroMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
  }

  export type registroMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    ubicacion?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
  }

  export type registroSumOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    encuestaId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type registroCreateNestedManyWithoutPersonaInput = {
    create?: XOR<registroCreateWithoutPersonaInput, registroUncheckedCreateWithoutPersonaInput> | registroCreateWithoutPersonaInput[] | registroUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutPersonaInput | registroCreateOrConnectWithoutPersonaInput[]
    createMany?: registroCreateManyPersonaInputEnvelope
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
  }

  export type registroUncheckedCreateNestedManyWithoutPersonaInput = {
    create?: XOR<registroCreateWithoutPersonaInput, registroUncheckedCreateWithoutPersonaInput> | registroCreateWithoutPersonaInput[] | registroUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutPersonaInput | registroCreateOrConnectWithoutPersonaInput[]
    createMany?: registroCreateManyPersonaInputEnvelope
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type registroUpdateManyWithoutPersonaNestedInput = {
    create?: XOR<registroCreateWithoutPersonaInput, registroUncheckedCreateWithoutPersonaInput> | registroCreateWithoutPersonaInput[] | registroUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutPersonaInput | registroCreateOrConnectWithoutPersonaInput[]
    upsert?: registroUpsertWithWhereUniqueWithoutPersonaInput | registroUpsertWithWhereUniqueWithoutPersonaInput[]
    createMany?: registroCreateManyPersonaInputEnvelope
    set?: registroWhereUniqueInput | registroWhereUniqueInput[]
    disconnect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    delete?: registroWhereUniqueInput | registroWhereUniqueInput[]
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    update?: registroUpdateWithWhereUniqueWithoutPersonaInput | registroUpdateWithWhereUniqueWithoutPersonaInput[]
    updateMany?: registroUpdateManyWithWhereWithoutPersonaInput | registroUpdateManyWithWhereWithoutPersonaInput[]
    deleteMany?: registroScalarWhereInput | registroScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type registroUncheckedUpdateManyWithoutPersonaNestedInput = {
    create?: XOR<registroCreateWithoutPersonaInput, registroUncheckedCreateWithoutPersonaInput> | registroCreateWithoutPersonaInput[] | registroUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutPersonaInput | registroCreateOrConnectWithoutPersonaInput[]
    upsert?: registroUpsertWithWhereUniqueWithoutPersonaInput | registroUpsertWithWhereUniqueWithoutPersonaInput[]
    createMany?: registroCreateManyPersonaInputEnvelope
    set?: registroWhereUniqueInput | registroWhereUniqueInput[]
    disconnect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    delete?: registroWhereUniqueInput | registroWhereUniqueInput[]
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    update?: registroUpdateWithWhereUniqueWithoutPersonaInput | registroUpdateWithWhereUniqueWithoutPersonaInput[]
    updateMany?: registroUpdateManyWithWhereWithoutPersonaInput | registroUpdateManyWithWhereWithoutPersonaInput[]
    deleteMany?: registroScalarWhereInput | registroScalarWhereInput[]
  }

  export type registroCreateNestedManyWithoutEncuestaInput = {
    create?: XOR<registroCreateWithoutEncuestaInput, registroUncheckedCreateWithoutEncuestaInput> | registroCreateWithoutEncuestaInput[] | registroUncheckedCreateWithoutEncuestaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutEncuestaInput | registroCreateOrConnectWithoutEncuestaInput[]
    createMany?: registroCreateManyEncuestaInputEnvelope
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
  }

  export type registroUncheckedCreateNestedManyWithoutEncuestaInput = {
    create?: XOR<registroCreateWithoutEncuestaInput, registroUncheckedCreateWithoutEncuestaInput> | registroCreateWithoutEncuestaInput[] | registroUncheckedCreateWithoutEncuestaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutEncuestaInput | registroCreateOrConnectWithoutEncuestaInput[]
    createMany?: registroCreateManyEncuestaInputEnvelope
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
  }

  export type registroUpdateManyWithoutEncuestaNestedInput = {
    create?: XOR<registroCreateWithoutEncuestaInput, registroUncheckedCreateWithoutEncuestaInput> | registroCreateWithoutEncuestaInput[] | registroUncheckedCreateWithoutEncuestaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutEncuestaInput | registroCreateOrConnectWithoutEncuestaInput[]
    upsert?: registroUpsertWithWhereUniqueWithoutEncuestaInput | registroUpsertWithWhereUniqueWithoutEncuestaInput[]
    createMany?: registroCreateManyEncuestaInputEnvelope
    set?: registroWhereUniqueInput | registroWhereUniqueInput[]
    disconnect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    delete?: registroWhereUniqueInput | registroWhereUniqueInput[]
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    update?: registroUpdateWithWhereUniqueWithoutEncuestaInput | registroUpdateWithWhereUniqueWithoutEncuestaInput[]
    updateMany?: registroUpdateManyWithWhereWithoutEncuestaInput | registroUpdateManyWithWhereWithoutEncuestaInput[]
    deleteMany?: registroScalarWhereInput | registroScalarWhereInput[]
  }

  export type registroUncheckedUpdateManyWithoutEncuestaNestedInput = {
    create?: XOR<registroCreateWithoutEncuestaInput, registroUncheckedCreateWithoutEncuestaInput> | registroCreateWithoutEncuestaInput[] | registroUncheckedCreateWithoutEncuestaInput[]
    connectOrCreate?: registroCreateOrConnectWithoutEncuestaInput | registroCreateOrConnectWithoutEncuestaInput[]
    upsert?: registroUpsertWithWhereUniqueWithoutEncuestaInput | registroUpsertWithWhereUniqueWithoutEncuestaInput[]
    createMany?: registroCreateManyEncuestaInputEnvelope
    set?: registroWhereUniqueInput | registroWhereUniqueInput[]
    disconnect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    delete?: registroWhereUniqueInput | registroWhereUniqueInput[]
    connect?: registroWhereUniqueInput | registroWhereUniqueInput[]
    update?: registroUpdateWithWhereUniqueWithoutEncuestaInput | registroUpdateWithWhereUniqueWithoutEncuestaInput[]
    updateMany?: registroUpdateManyWithWhereWithoutEncuestaInput | registroUpdateManyWithWhereWithoutEncuestaInput[]
    deleteMany?: registroScalarWhereInput | registroScalarWhereInput[]
  }

  export type personaCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<personaCreateWithoutRegistrosInput, personaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: personaCreateOrConnectWithoutRegistrosInput
    connect?: personaWhereUniqueInput
  }

  export type encuestaCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<encuestaCreateWithoutRegistrosInput, encuestaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: encuestaCreateOrConnectWithoutRegistrosInput
    connect?: encuestaWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type personaUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<personaCreateWithoutRegistrosInput, personaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: personaCreateOrConnectWithoutRegistrosInput
    upsert?: personaUpsertWithoutRegistrosInput
    connect?: personaWhereUniqueInput
    update?: XOR<XOR<personaUpdateToOneWithWhereWithoutRegistrosInput, personaUpdateWithoutRegistrosInput>, personaUncheckedUpdateWithoutRegistrosInput>
  }

  export type encuestaUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<encuestaCreateWithoutRegistrosInput, encuestaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: encuestaCreateOrConnectWithoutRegistrosInput
    upsert?: encuestaUpsertWithoutRegistrosInput
    connect?: encuestaWhereUniqueInput
    update?: XOR<XOR<encuestaUpdateToOneWithWhereWithoutRegistrosInput, encuestaUpdateWithoutRegistrosInput>, encuestaUncheckedUpdateWithoutRegistrosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type registroCreateWithoutPersonaInput = {
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    encuesta: encuestaCreateNestedOneWithoutRegistrosInput
  }

  export type registroUncheckedCreateWithoutPersonaInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    encuestaId: number
  }

  export type registroCreateOrConnectWithoutPersonaInput = {
    where: registroWhereUniqueInput
    create: XOR<registroCreateWithoutPersonaInput, registroUncheckedCreateWithoutPersonaInput>
  }

  export type registroCreateManyPersonaInputEnvelope = {
    data: registroCreateManyPersonaInput | registroCreateManyPersonaInput[]
    skipDuplicates?: boolean
  }

  export type registroUpsertWithWhereUniqueWithoutPersonaInput = {
    where: registroWhereUniqueInput
    update: XOR<registroUpdateWithoutPersonaInput, registroUncheckedUpdateWithoutPersonaInput>
    create: XOR<registroCreateWithoutPersonaInput, registroUncheckedCreateWithoutPersonaInput>
  }

  export type registroUpdateWithWhereUniqueWithoutPersonaInput = {
    where: registroWhereUniqueInput
    data: XOR<registroUpdateWithoutPersonaInput, registroUncheckedUpdateWithoutPersonaInput>
  }

  export type registroUpdateManyWithWhereWithoutPersonaInput = {
    where: registroScalarWhereInput
    data: XOR<registroUpdateManyMutationInput, registroUncheckedUpdateManyWithoutPersonaInput>
  }

  export type registroScalarWhereInput = {
    AND?: registroScalarWhereInput | registroScalarWhereInput[]
    OR?: registroScalarWhereInput[]
    NOT?: registroScalarWhereInput | registroScalarWhereInput[]
    id?: IntFilter<"registro"> | number
    fecha?: DateTimeFilter<"registro"> | Date | string
    hora?: DateTimeFilter<"registro"> | Date | string
    ubicacion?: StringFilter<"registro"> | string
    personaId?: IntFilter<"registro"> | number
    encuestaId?: IntFilter<"registro"> | number
  }

  export type registroCreateWithoutEncuestaInput = {
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    persona: personaCreateNestedOneWithoutRegistrosInput
  }

  export type registroUncheckedCreateWithoutEncuestaInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    personaId: number
  }

  export type registroCreateOrConnectWithoutEncuestaInput = {
    where: registroWhereUniqueInput
    create: XOR<registroCreateWithoutEncuestaInput, registroUncheckedCreateWithoutEncuestaInput>
  }

  export type registroCreateManyEncuestaInputEnvelope = {
    data: registroCreateManyEncuestaInput | registroCreateManyEncuestaInput[]
    skipDuplicates?: boolean
  }

  export type registroUpsertWithWhereUniqueWithoutEncuestaInput = {
    where: registroWhereUniqueInput
    update: XOR<registroUpdateWithoutEncuestaInput, registroUncheckedUpdateWithoutEncuestaInput>
    create: XOR<registroCreateWithoutEncuestaInput, registroUncheckedCreateWithoutEncuestaInput>
  }

  export type registroUpdateWithWhereUniqueWithoutEncuestaInput = {
    where: registroWhereUniqueInput
    data: XOR<registroUpdateWithoutEncuestaInput, registroUncheckedUpdateWithoutEncuestaInput>
  }

  export type registroUpdateManyWithWhereWithoutEncuestaInput = {
    where: registroScalarWhereInput
    data: XOR<registroUpdateManyMutationInput, registroUncheckedUpdateManyWithoutEncuestaInput>
  }

  export type personaCreateWithoutRegistrosInput = {
    nombre: string
    identificacion: string
  }

  export type personaUncheckedCreateWithoutRegistrosInput = {
    id?: number
    nombre: string
    identificacion: string
  }

  export type personaCreateOrConnectWithoutRegistrosInput = {
    where: personaWhereUniqueInput
    create: XOR<personaCreateWithoutRegistrosInput, personaUncheckedCreateWithoutRegistrosInput>
  }

  export type encuestaCreateWithoutRegistrosInput = {
    descripcion: string
    detalles: string
  }

  export type encuestaUncheckedCreateWithoutRegistrosInput = {
    id?: number
    descripcion: string
    detalles: string
  }

  export type encuestaCreateOrConnectWithoutRegistrosInput = {
    where: encuestaWhereUniqueInput
    create: XOR<encuestaCreateWithoutRegistrosInput, encuestaUncheckedCreateWithoutRegistrosInput>
  }

  export type personaUpsertWithoutRegistrosInput = {
    update: XOR<personaUpdateWithoutRegistrosInput, personaUncheckedUpdateWithoutRegistrosInput>
    create: XOR<personaCreateWithoutRegistrosInput, personaUncheckedCreateWithoutRegistrosInput>
    where?: personaWhereInput
  }

  export type personaUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: personaWhereInput
    data: XOR<personaUpdateWithoutRegistrosInput, personaUncheckedUpdateWithoutRegistrosInput>
  }

  export type personaUpdateWithoutRegistrosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
  }

  export type personaUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
  }

  export type encuestaUpsertWithoutRegistrosInput = {
    update: XOR<encuestaUpdateWithoutRegistrosInput, encuestaUncheckedUpdateWithoutRegistrosInput>
    create: XOR<encuestaCreateWithoutRegistrosInput, encuestaUncheckedCreateWithoutRegistrosInput>
    where?: encuestaWhereInput
  }

  export type encuestaUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: encuestaWhereInput
    data: XOR<encuestaUpdateWithoutRegistrosInput, encuestaUncheckedUpdateWithoutRegistrosInput>
  }

  export type encuestaUpdateWithoutRegistrosInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    detalles?: StringFieldUpdateOperationsInput | string
  }

  export type encuestaUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    detalles?: StringFieldUpdateOperationsInput | string
  }

  export type registroCreateManyPersonaInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    encuestaId: number
  }

  export type registroUpdateWithoutPersonaInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    encuesta?: encuestaUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type registroUncheckedUpdateWithoutPersonaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    encuestaId?: IntFieldUpdateOperationsInput | number
  }

  export type registroUncheckedUpdateManyWithoutPersonaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    encuestaId?: IntFieldUpdateOperationsInput | number
  }

  export type registroCreateManyEncuestaInput = {
    id?: number
    fecha: Date | string
    hora: Date | string
    ubicacion: string
    personaId: number
  }

  export type registroUpdateWithoutEncuestaInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    persona?: personaUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type registroUncheckedUpdateWithoutEncuestaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    personaId?: IntFieldUpdateOperationsInput | number
  }

  export type registroUncheckedUpdateManyWithoutEncuestaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    personaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PersonaCountOutputTypeDefaultArgs instead
     */
    export type PersonaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EncuestaCountOutputTypeDefaultArgs instead
     */
    export type EncuestaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EncuestaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use personaDefaultArgs instead
     */
    export type personaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = personaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use encuestaDefaultArgs instead
     */
    export type encuestaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = encuestaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use registroDefaultArgs instead
     */
    export type registroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = registroDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}